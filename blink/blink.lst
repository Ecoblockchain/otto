
blink.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000304  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000000e  00800100  00800100  00000378  2**0
                  ALLOC
  2 .stab         000006cc  00000000  00000000  00000378  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000082  00000000  00000000  00000a44  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000a0  00000000  00000000  00000ac8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000588  00000000  00000000  00000b68  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002a6  00000000  00000000  000010f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000279  00000000  00000000  00001396  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e8  00000000  00000000  00001610  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000286  00000000  00000000  000016f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001ec  00000000  00000000  0000197e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001b6a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e0       	ldi	r30, 0x04	; 4
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 30       	cpi	r26, 0x0E	; 14
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 67 01 	call	0x2ce	; 0x2ce <main>
  9e:	0c 94 80 01 	jmp	0x300	; 0x300 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_16>:
#ifndef sbi
#define sbi(sfr, bit) (_SFR_BYTE(sfr) |= _BV(bit))
#endif

ISR(TIMER0_OVF_vect)
{
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	2f 93       	push	r18
  b2:	3f 93       	push	r19
  b4:	4f 93       	push	r20
  b6:	5f 93       	push	r21
  b8:	6f 93       	push	r22
  ba:	7f 93       	push	r23
  bc:	8f 93       	push	r24
  be:	9f 93       	push	r25
  c0:	af 93       	push	r26
  c2:	bf 93       	push	r27
  c4:	ef 93       	push	r30
  c6:	ff 93       	push	r31
	Arduino::timer0_overflow_count++;
  c8:	80 91 0a 01 	lds	r24, 0x010A
  cc:	90 91 0b 01 	lds	r25, 0x010B
  d0:	a0 91 0c 01 	lds	r26, 0x010C
  d4:	b0 91 0d 01 	lds	r27, 0x010D
  d8:	01 96       	adiw	r24, 0x01	; 1
  da:	a1 1d       	adc	r26, r1
  dc:	b1 1d       	adc	r27, r1
  de:	80 93 0a 01 	sts	0x010A, r24
  e2:	90 93 0b 01 	sts	0x010B, r25
  e6:	a0 93 0c 01 	sts	0x010C, r26
  ea:	b0 93 0d 01 	sts	0x010D, r27
	// timer 0 prescale factor is 64 and the timer overflows at 256
	Arduino::timer0_clock_cycles += 64UL * 256UL;
  ee:	80 91 06 01 	lds	r24, 0x0106
  f2:	90 91 07 01 	lds	r25, 0x0107
  f6:	a0 91 08 01 	lds	r26, 0x0108
  fa:	b0 91 09 01 	lds	r27, 0x0109
  fe:	80 50       	subi	r24, 0x00	; 0
 100:	90 4c       	sbci	r25, 0xC0	; 192
 102:	af 4f       	sbci	r26, 0xFF	; 255
 104:	bf 4f       	sbci	r27, 0xFF	; 255
 106:	80 93 06 01 	sts	0x0106, r24
 10a:	90 93 07 01 	sts	0x0107, r25
 10e:	a0 93 08 01 	sts	0x0108, r26
 112:	b0 93 09 01 	sts	0x0109, r27
	while (Arduino::timer0_clock_cycles > 
 116:	27 c0       	rjmp	.+78     	; 0x166 <__vector_16+0xc0>
		   clockCyclesPerMicrosecond() * 1000UL) {
		Arduino::timer0_clock_cycles -= clockCyclesPerMicrosecond() * 1000UL;
 118:	80 91 06 01 	lds	r24, 0x0106
 11c:	90 91 07 01 	lds	r25, 0x0107
 120:	a0 91 08 01 	lds	r26, 0x0108
 124:	b0 91 09 01 	lds	r27, 0x0109
 128:	80 58       	subi	r24, 0x80	; 128
 12a:	9e 43       	sbci	r25, 0x3E	; 62
 12c:	a0 40       	sbci	r26, 0x00	; 0
 12e:	b0 40       	sbci	r27, 0x00	; 0
 130:	80 93 06 01 	sts	0x0106, r24
 134:	90 93 07 01 	sts	0x0107, r25
 138:	a0 93 08 01 	sts	0x0108, r26
 13c:	b0 93 09 01 	sts	0x0109, r27
		Arduino::timer0_millis++;
 140:	80 91 02 01 	lds	r24, 0x0102
 144:	90 91 03 01 	lds	r25, 0x0103
 148:	a0 91 04 01 	lds	r26, 0x0104
 14c:	b0 91 05 01 	lds	r27, 0x0105
 150:	01 96       	adiw	r24, 0x01	; 1
 152:	a1 1d       	adc	r26, r1
 154:	b1 1d       	adc	r27, r1
 156:	80 93 02 01 	sts	0x0102, r24
 15a:	90 93 03 01 	sts	0x0103, r25
 15e:	a0 93 04 01 	sts	0x0104, r26
 162:	b0 93 05 01 	sts	0x0105, r27
ISR(TIMER0_OVF_vect)
{
	Arduino::timer0_overflow_count++;
	// timer 0 prescale factor is 64 and the timer overflows at 256
	Arduino::timer0_clock_cycles += 64UL * 256UL;
	while (Arduino::timer0_clock_cycles > 
 166:	80 91 06 01 	lds	r24, 0x0106
 16a:	90 91 07 01 	lds	r25, 0x0107
 16e:	a0 91 08 01 	lds	r26, 0x0108
 172:	b0 91 09 01 	lds	r27, 0x0109
 176:	81 38       	cpi	r24, 0x81	; 129
 178:	2e e3       	ldi	r18, 0x3E	; 62
 17a:	92 07       	cpc	r25, r18
 17c:	20 e0       	ldi	r18, 0x00	; 0
 17e:	a2 07       	cpc	r26, r18
 180:	20 e0       	ldi	r18, 0x00	; 0
 182:	b2 07       	cpc	r27, r18
 184:	48 f6       	brcc	.-110    	; 0x118 <__vector_16+0x72>
		   clockCyclesPerMicrosecond() * 1000UL) {
		Arduino::timer0_clock_cycles -= clockCyclesPerMicrosecond() * 1000UL;
		Arduino::timer0_millis++;
	}
	if (timer0_overflow)
 186:	80 91 00 01 	lds	r24, 0x0100
 18a:	90 91 01 01 	lds	r25, 0x0101
 18e:	00 97       	sbiw	r24, 0x00	; 0
 190:	29 f0       	breq	.+10     	; 0x19c <__vector_16+0xf6>
		timer0_overflow();
 192:	e0 91 00 01 	lds	r30, 0x0100
 196:	f0 91 01 01 	lds	r31, 0x0101
 19a:	09 95       	icall
}
 19c:	ff 91       	pop	r31
 19e:	ef 91       	pop	r30
 1a0:	bf 91       	pop	r27
 1a2:	af 91       	pop	r26
 1a4:	9f 91       	pop	r25
 1a6:	8f 91       	pop	r24
 1a8:	7f 91       	pop	r23
 1aa:	6f 91       	pop	r22
 1ac:	5f 91       	pop	r21
 1ae:	4f 91       	pop	r20
 1b0:	3f 91       	pop	r19
 1b2:	2f 91       	pop	r18
 1b4:	0f 90       	pop	r0
 1b6:	0f be       	out	0x3f, r0	; 63
 1b8:	0f 90       	pop	r0
 1ba:	1f 90       	pop	r1
 1bc:	18 95       	reti

000001be <_ZN7Arduino6millisEv>:

unsigned long Arduino::millis()
{
 1be:	0f 93       	push	r16
 1c0:	1f 93       	push	r17
	unsigned long m;
	uint8_t oldSREG = SREG;
 1c2:	8f b7       	in	r24, 0x3f	; 63
	
	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of the timer0_millis++)
	cli();
 1c4:	f8 94       	cli
	m = timer0_millis;
 1c6:	00 91 02 01 	lds	r16, 0x0102
 1ca:	10 91 03 01 	lds	r17, 0x0103
 1ce:	20 91 04 01 	lds	r18, 0x0104
 1d2:	30 91 05 01 	lds	r19, 0x0105
	SREG = oldSREG;
 1d6:	8f bf       	out	0x3f, r24	; 63
	
	return m;
}
 1d8:	b8 01       	movw	r22, r16
 1da:	c9 01       	movw	r24, r18
 1dc:	1f 91       	pop	r17
 1de:	0f 91       	pop	r16
 1e0:	08 95       	ret

000001e2 <_ZN7Arduino6microsEv>:

unsigned long Arduino::micros() {
 1e2:	0f 93       	push	r16
 1e4:	1f 93       	push	r17
	unsigned long m, t;
	uint8_t oldSREG = SREG;
 1e6:	4f b7       	in	r20, 0x3f	; 63
	
	cli();	
 1e8:	f8 94       	cli
	t = TCNT0;
 1ea:	86 b5       	in	r24, 0x26	; 38
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	a0 e0       	ldi	r26, 0x00	; 0
 1f0:	b0 e0       	ldi	r27, 0x00	; 0
  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t == 0))
 1f2:	a8 9b       	sbis	0x15, 0	; 21
 1f4:	08 c0       	rjmp	.+16     	; 0x206 <_ZN7Arduino6microsEv+0x24>
 1f6:	00 97       	sbiw	r24, 0x00	; 0
 1f8:	a1 05       	cpc	r26, r1
 1fa:	b1 05       	cpc	r27, r1
 1fc:	21 f4       	brne	.+8      	; 0x206 <_ZN7Arduino6microsEv+0x24>
		t = 256;
 1fe:	80 e0       	ldi	r24, 0x00	; 0
 200:	91 e0       	ldi	r25, 0x01	; 1
 202:	a0 e0       	ldi	r26, 0x00	; 0
 204:	b0 e0       	ldi	r27, 0x00	; 0
#else
	if ((TIFR & _BV(TOV0)) && (t == 0))
		t = 256;
#endif

	m = timer0_overflow_count;
 206:	00 91 0a 01 	lds	r16, 0x010A
 20a:	10 91 0b 01 	lds	r17, 0x010B
 20e:	20 91 0c 01 	lds	r18, 0x010C
 212:	30 91 0d 01 	lds	r19, 0x010D
	SREG = oldSREG;
 216:	4f bf       	out	0x3f, r20	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
 218:	32 2f       	mov	r19, r18
 21a:	21 2f       	mov	r18, r17
 21c:	10 2f       	mov	r17, r16
 21e:	00 27       	eor	r16, r16
 220:	08 0f       	add	r16, r24
 222:	19 1f       	adc	r17, r25
 224:	2a 1f       	adc	r18, r26
 226:	3b 1f       	adc	r19, r27
 228:	52 e0       	ldi	r21, 0x02	; 2
 22a:	00 0f       	add	r16, r16
 22c:	11 1f       	adc	r17, r17
 22e:	22 1f       	adc	r18, r18
 230:	33 1f       	adc	r19, r19
 232:	5a 95       	dec	r21
 234:	d1 f7       	brne	.-12     	; 0x22a <_ZN7Arduino6microsEv+0x48>
}
 236:	b8 01       	movw	r22, r16
 238:	c9 01       	movw	r24, r18
 23a:	1f 91       	pop	r17
 23c:	0f 91       	pop	r16
 23e:	08 95       	ret

00000240 <_ZN7Arduino17delayMicrosecondsEj>:
#if F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call yields a delay of approximately 1 1/8 us.
	if (--us == 0)
 240:	01 97       	sbiw	r24, 0x01	; 1
 242:	51 f0       	breq	.+20     	; 0x258 <_ZN7Arduino17delayMicrosecondsEj+0x18>
		return;

	// the following loop takes a quarter of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2;
 244:	88 0f       	add	r24, r24
 246:	99 1f       	adc	r25, r25
 248:	88 0f       	add	r24, r24
 24a:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	us -= 2;
 24c:	02 97       	sbiw	r24, 0x02	; 2
	us--;
#endif

	// disable interrupts, otherwise the timer 0 overflow interrupt that
	// tracks milliseconds will make us delay longer than we want.
	oldSREG = SREG;
 24e:	2f b7       	in	r18, 0x3f	; 63
	cli();
 250:	f8 94       	cli

	// busy wait
	__asm__ __volatile__ (
		"1: sbiw %0,1" "\n\t" // 2 cycles
		"brne 1b" : "=w" (us) : "0" (us) // 2 cycles
	);
 252:	01 97       	sbiw	r24, 0x01	; 1
 254:	f1 f7       	brne	.-4      	; 0x252 <_ZN7Arduino17delayMicrosecondsEj+0x12>

	// reenable interrupts.
	SREG = oldSREG;
 256:	2f bf       	out	0x3f, r18	; 63
 258:	08 95       	ret

0000025a <_ZN7Arduino4initEv>:

void Arduino::init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 25a:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if !defined(__AVR_ATmega8__)
	sbi(TCCR0A, WGM01);
 25c:	84 b5       	in	r24, 0x24	; 36
 25e:	82 60       	ori	r24, 0x02	; 2
 260:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 262:	84 b5       	in	r24, 0x24	; 36
 264:	81 60       	ori	r24, 0x01	; 1
 266:	84 bd       	out	0x24, r24	; 36
	// set timer 0 prescale factor to 64
#if defined(__AVR_ATmega8__)
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#else
	sbi(TCCR0B, CS01);
 268:	85 b5       	in	r24, 0x25	; 37
 26a:	82 60       	ori	r24, 0x02	; 2
 26c:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 26e:	85 b5       	in	r24, 0x25	; 37
 270:	81 60       	ori	r24, 0x01	; 1
 272:	85 bd       	out	0x25, r24	; 37
#endif
	// enable timer 0 overflow interrupt
#if defined(__AVR_ATmega8__)
	sbi(TIMSK, TOIE0);
#else
	sbi(TIMSK0, TOIE0);
 274:	ee e6       	ldi	r30, 0x6E	; 110
 276:	f0 e0       	ldi	r31, 0x00	; 0
 278:	80 81       	ld	r24, Z
 27a:	81 60       	ori	r24, 0x01	; 1
 27c:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 27e:	e1 e8       	ldi	r30, 0x81	; 129
 280:	f0 e0       	ldi	r31, 0x00	; 0
 282:	80 81       	ld	r24, Z
 284:	82 60       	ori	r24, 0x02	; 2
 286:	80 83       	st	Z, r24
	sbi(TCCR1B, CS10);
 288:	80 81       	ld	r24, Z
 28a:	81 60       	ori	r24, 0x01	; 1
 28c:	80 83       	st	Z, r24
	// put timer 1 in 8-bit phase correct pwm mode
	sbi(TCCR1A, WGM10);
 28e:	e0 e8       	ldi	r30, 0x80	; 128
 290:	f0 e0       	ldi	r31, 0x00	; 0
 292:	80 81       	ld	r24, Z
 294:	81 60       	ori	r24, 0x01	; 1
 296:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(__AVR_ATmega8__)
	sbi(TCCR2, CS22);
#else
	sbi(TCCR2B, CS22);
 298:	e1 eb       	ldi	r30, 0xB1	; 177
 29a:	f0 e0       	ldi	r31, 0x00	; 0
 29c:	80 81       	ld	r24, Z
 29e:	84 60       	ori	r24, 0x04	; 4
 2a0:	80 83       	st	Z, r24
#endif
	// configure timer 2 for phase correct pwm (8-bit)
#if defined(__AVR_ATmega8__)
	sbi(TCCR2, WGM20);
#else
	sbi(TCCR2A, WGM20);
 2a2:	e0 eb       	ldi	r30, 0xB0	; 176
 2a4:	f0 e0       	ldi	r31, 0x00	; 0
 2a6:	80 81       	ld	r24, Z
 2a8:	81 60       	ori	r24, 0x01	; 1
 2aa:	80 83       	st	Z, r24

	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
 2ac:	ea e7       	ldi	r30, 0x7A	; 122
 2ae:	f0 e0       	ldi	r31, 0x00	; 0
 2b0:	80 81       	ld	r24, Z
 2b2:	84 60       	ori	r24, 0x04	; 4
 2b4:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
 2b6:	80 81       	ld	r24, Z
 2b8:	82 60       	ori	r24, 0x02	; 2
 2ba:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
 2bc:	80 81       	ld	r24, Z
 2be:	81 60       	ori	r24, 0x01	; 1
 2c0:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 2c2:	80 81       	ld	r24, Z
 2c4:	80 68       	ori	r24, 0x80	; 128
 2c6:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(__AVR_ATmega8__)
	UCSRB = 0;
#else
	UCSR0B = 0;
 2c8:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
 2cc:	08 95       	ret

000002ce <main>:

#include <arduino++.h>

int main(void)
{
	Arduino::init();
 2ce:	0e 94 2d 01 	call	0x25a	; 0x25a <_ZN7Arduino4initEv>
};

template <byte ddr, byte port, byte in, byte bit> class _Pin
{
public:
    static void Out() { _SFR_IO8(ddr) |= _BV(bit); }
 2d2:	25 9a       	sbi	0x04, 5	; 4
    static void In() { _SFR_IO8(ddr) &= ~_BV(bit); }
    static void Set() { _SFR_IO8(port) |= _BV(bit); }
    static void Clear() { _SFR_IO8(port) &= ~_BV(bit); }
    static byte Read() { return !!(_SFR_IO8(in) & _BV(bit)); }
	static byte Toggle() { return (_SFR_IO8(port) ^ _BV(bit)); }
 2d4:	80 b1       	in	r24, 0x00	; 0
	static unsigned long millis();
	static unsigned long micros();

	static void delay(unsigned long ms)
	{
		unsigned long start = millis();
 2d6:	0e 94 df 00 	call	0x1be	; 0x1be <_ZN7Arduino6millisEv>
 2da:	6b 01       	movw	r12, r22
 2dc:	7c 01       	movw	r14, r24
	
		while (millis() - start <= ms)
 2de:	0e 94 df 00 	call	0x1be	; 0x1be <_ZN7Arduino6millisEv>
 2e2:	dc 01       	movw	r26, r24
 2e4:	cb 01       	movw	r24, r22
 2e6:	8c 19       	sub	r24, r12
 2e8:	9d 09       	sbc	r25, r13
 2ea:	ae 09       	sbc	r26, r14
 2ec:	bf 09       	sbc	r27, r15
 2ee:	89 3e       	cpi	r24, 0xE9	; 233
 2f0:	23 e0       	ldi	r18, 0x03	; 3
 2f2:	92 07       	cpc	r25, r18
 2f4:	20 e0       	ldi	r18, 0x00	; 0
 2f6:	a2 07       	cpc	r26, r18
 2f8:	20 e0       	ldi	r18, 0x00	; 0
 2fa:	b2 07       	cpc	r27, r18
 2fc:	80 f3       	brcs	.-32     	; 0x2de <main+0x10>
 2fe:	ea cf       	rjmp	.-44     	; 0x2d4 <main+0x6>

00000300 <_exit>:
 300:	f8 94       	cli

00000302 <__stop_program>:
 302:	ff cf       	rjmp	.-2      	; 0x302 <__stop_program>
